import groovy.json.JsonOutput

apply plugin: 'java'

// Define repositories
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

// The task name is listAllDependencies
task listAllDependencies {
    doLast {
        def allProjectsDependencies = []

        // Iterate through all modules including 'app'
        allprojects.each { project ->
            // Exclude the ones without a 'implementation' configuration
            if (project.configurations.findByName('implementation')) {
                def projectDependencies = []

                // Iterate over dependencies
                project.configurations.getByName('implementation').allDependencies.each { dependency ->
                    // Exclude non-module dependencies
                    if (dependency instanceof ProjectDependency) {
                        projectDependencies.add(dependency.dependencyProject.name)
                    }
                }

                def projectObject = new LinkedHashMap()
                projectObject.put("libraryName", project.name)
                projectObject.put("dependencies", projectDependencies)
                allProjectsDependencies.add(projectObject)
            }
        }

        // Convert the map to JSON
        def json = JsonOutput.toJson(allProjectsDependencies)

        // Pretty print JSON
        def prettyJson = JsonOutput.prettyPrint(json)

        // Print out JSON
        println(prettyJson)
    }
}

// Define a task to download LibraryDependencies.java
task downloadLibraryDependencies(type: Copy) {
    from 'https://raw.githubusercontent.com/<YourGithubUsername>/<YourRepoName>/main/LibraryDependencies.java'
    into "$buildDir/downloaded"
    rename '(.*).java', 'LibraryDependencies.java'
}

// Define a task to run LibraryDependencies.java
task runLibraryDependencies(type: JavaExec, dependsOn: ['downloadLibraryDependencies', 'listModulesDependencies']) {
    main = 'LibraryDependencies'
    classpath = sourceSets.main.runtimeClasspath
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}