name: Publish to Google Play Store

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the new tag (Normally next version number of the existing tag)'
        required: true

permissions:
  contents: write
  id-token: write  # required for OIDC (safe to keep even if unused)

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Install Fastlane (if Gemfile not used)
        if: ${{ !hashFiles('Gemfile') }}
        run: gem install fastlane

      - name: Create Git tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}

      - name: Write google-services.json
        run: |
          mkdir -p app
          echo "$GOOGLE_SERVICES_JSON_B64" | base64 -d > app/google-services.json
          echo "google-services.json written to app directory"
          wc -c app/google-services.json
        env:
          GOOGLE_SERVICES_JSON_B64: ${{ secrets.GOOGLE_SERVICES_JSON_B64 }}

      - name: Validate google-services.json
        run: |
          python - <<'PY'
          import json, sys, hashlib
          p = 'app/google-services.json'
          b = open(p,'rb').read()
          print("bytes:", len(b))
          print("sha256:", hashlib.sha256(b).hexdigest())
          json.load(open(p))
          print("JSON OK")
          PY

      - name: Write Google Play JSON key
        run: echo "$GOOGLE_PLAY_JSON_B64" | base64 -d > service_account.json
        env:
          GOOGLE_PLAY_JSON_B64: ${{ secrets.GOOGLE_PLAY_JSON_B64 }}

      - name: Restore Android upload keystore & signing props
        shell: bash
        run: |
          # Create the release.keystore file from the base64 encoded secret
          echo "Restoring Android upload keystore from base64 secret..."
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore
          wc -c release.keystore
          # Ensure the keystore file has the correct permissions
          chmod 600 release.keystore
          echo "Keystore file created:"
          ls -l release.keystore
          # Print the current working directory to verify the file location
          echo "Current directory:"
          pwd release.keystore
          
          # Create the .gradle directory and write the signing properties
          # This is needed for Gradle to sign the APKs
          # and bundles automatically during the build process.
          # The file is named ci-signing.properties to avoid conflicts with local properties.
          mkdir -p ~/.gradle
          {
            echo "RELEASE_STORE_FILE=../release.keystore"
            echo "RELEASE_STORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD"
            echo "RELEASE_KEY_ALIAS=$ANDROID_KEY_ALIAS"
            echo "RELEASE_KEY_PASSWORD=$ANDROID_KEY_PASSWORD"
          } > ~/.gradle/ci-signing.properties
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

#      - name: Build Release bundle (Gradle)
#        run: ./gradlew --no-daemon :app:bundleRelease

      # ===== Auth A: Service Account JSON key (fastest) =====
#      - name: Write Google Play JSON key
#        if: ${{ !vars.USE_OIDC }}
#        run: echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" > service_account.json

#      # ===== Auth B: OIDC (keyless) =====
#      - name: Authenticate to Google via OIDC
#        if: ${{ vars.USE_OIDC }}
#        uses: google-github-actions/auth@v2
#        with:
#          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
#          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

#      - name: Publish to Play (Fastlane)
#        run: |
#          if [ -f Gemfile ]; then
#            if [ "${{ vars.USE_OIDC }}" = "true" ]; then
#              bundle exec fastlane android deploy use_oauth:true
#            else
#              bundle exec fastlane android deploy json_key:service_account.json
#            fi
#          else
#            if [ "${{ vars.USE_OIDC }}" = "true" ]; then
#              fastlane android deploy use_oauth:true
#            else
#              fastlane android deploy json_key:service_account.json
#            fi
#          fi

      - name: Update version in build.gradle
        run: ./gradlew updateVersion

      - name: Create publish_with_fastlane_ file
        run: echo "$PUBLISH_WITH_FASTLANE" > fastlane/publish-with-fastlane-37b6b5b3a28c.json
        env:
          PUBLISH_WITH_FASTLANE: ${{ secrets.PUBLISH_WITH_FASTLANE }}

      - name: Run Fastlane
        run: bundle exec fastlane deploy
